/**
 * D·ªãch v·ª• gh√©p ph·ª• ƒë·ªÅ v√† video
 */
const fs = require('fs-extra');
const path = require('path');
const { exec } = require('child_process');
const config = require('../config');
const crypto = require('crypto');
const pTimeout = require('p-timeout');

// ƒê·ªãnh nghƒ©a h√†m formatMessage n·ªôi b·ªô
const formatMessage = (emoji, title, content) => {
	return `<b>${emoji} ${title}</b>\n\n${content}`;
};

// C·∫•u h√¨nh th·ªùi gian ch·ªù tƒÉng l√™n cho qu√° tr√¨nh gh√©p video
const MUXING_TIMEOUT = 7200000; // 2 gi·ªù (7,200,000 ms)
// C·∫•u h√¨nh c·∫≠p nh·∫≠t tr·∫°ng th√°i
const STATUS_UPDATE_INTERVAL = 3000; // C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªói 3 gi√¢y

/**
 * Ki·ªÉm tra ƒë·ªãnh d·∫°ng video c√≥ h·ªó tr·ª£ g·∫Øn subtitle kh√¥ng
 * @param {string} videoPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video
 * @returns {Promise<boolean>} - true n·∫øu video h·ªó tr·ª£ g·∫Øn subtitle
 */
async function checkVideoSubtitleSupport(videoPath) {
	return new Promise((resolve, reject) => {
		const command = `ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "${videoPath}"`;
		exec(command, (error, stdout, stderr) => {
			if (error) {
				console.error(`L·ªói khi ki·ªÉm tra video: ${error.message}`);
				// N·∫øu kh√¥ng th·ªÉ ki·ªÉm tra, gi·∫£ ƒë·ªãnh l√† h·ªó tr·ª£
				resolve(true);
				return;
			}
			// C√°c ƒë·ªãnh d·∫°ng video ph·ªï bi·∫øn h·ªó tr·ª£ subtitle
			const supportedFormats = [
				'h264',
				'hevc',
				'mpeg4',
				'mpeg2video',
				'vp8',
				'vp9',
				'av1',
				'prores',
				'mjpeg',
				'wmv2',
				'wmv3',
			];
			const codec = stdout.trim().toLowerCase();
			const isSupported = supportedFormats.includes(codec);
			console.log(`Codec video: ${codec}, H·ªó tr·ª£ ph·ª• ƒë·ªÅ: ${isSupported}`);
			resolve(isSupported);
		});
	});
}

/**
 * Gh√©p ph·ª• ƒë·ªÅ v√†o video s·ª≠ d·ª•ng ffmpeg
 * @param {string} videoPath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video
 * @param {string} subtitlePath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ph·ª• ƒë·ªÅ
 * @param {Object} options - C√°c t√πy ch·ªçn g·∫Øn ph·ª• ƒë·ªÅ
 * @param {string} options.language - Ng√¥n ng·ªØ c·ªßa ph·ª• ƒë·ªÅ (m·∫∑c ƒë·ªãnh: 'vie')
 * @param {string} options.font - Font ch·ªØ (m·∫∑c ƒë·ªãnh: 'Arial')
 * @param {number} options.fontSize - K√≠ch th∆∞·ªõc ch·ªØ (m·∫∑c ƒë·ªãnh: 24)
 * @param {string} options.fontColor - M√†u ch·ªØ (m·∫∑c ƒë·ªãnh: 'white')
 * @param {string} options.position - V·ªã tr√≠ hi·ªÉn th·ªã (m·∫∑c ƒë·ªãnh: 'bottom')
 * @param {boolean} options.skipFormatCheck - B·ªè qua ki·ªÉm tra ƒë·ªãnh d·∫°ng video (m·∫∑c ƒë·ªãnh: false)
 * @param {Object} options.telegramInfo - Th√¥ng tin ƒë·ªÉ g·ª≠i c·∫≠p nh·∫≠t l√™n Telegram (t√πy ch·ªçn)
 * @param {Object} options.telegramInfo.ctx - Context c·ªßa Telegram
 * @param {number} options.telegramInfo.messageId - ID c·ªßa tin nh·∫Øn c·∫ßn c·∫≠p nh·∫≠t
 * @returns {Promise<string>} - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video ƒë√£ gh√©p
 */
async function muxSubtitleToVideo(videoPath, subtitlePath, options = {}) {
	try {
		// C√°c t√πy ch·ªçn m·∫∑c ƒë·ªãnh
		const defaultOptions = {
			language: 'vie',
			font: 'Arial',
			fontSize: 24,
			fontColor: 'white',
			position: 'bottom',
			skipFormatCheck: false,
		};

		// K·∫øt h·ª£p t√πy ch·ªçn ng∆∞·ªùi d√πng v·ªõi t√πy ch·ªçn m·∫∑c ƒë·ªãnh
		const finalOptions = { ...defaultOptions, ...options };

		// Ki·ªÉm tra video c√≥ h·ªó tr·ª£ g·∫Øn subtitle kh√¥ng (n·∫øu kh√¥ng b·ªè qua ki·ªÉm tra)
		if (!finalOptions.skipFormatCheck) {
			const isSupported = await checkVideoSubtitleSupport(videoPath);
			if (!isSupported) {
				console.warn(
					'ƒê·ªãnh d·∫°ng video kh√¥ng ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† h·ªó tr·ª£ ph·ª• ƒë·ªÅ, nh∆∞ng s·∫Ω th·ª≠ gh√©p anyway'
				);
			}
		}

		// T·∫°o t√™n file k·∫øt qu·∫£ ng·∫´u nhi√™n ƒë·ªÉ tr√°nh xung ƒë·ªôt
		const randomHash = crypto.randomBytes(8).toString('hex');
		const outputFileName = `muxed_${randomHash}${path.extname(videoPath)}`;
		const outputPath = path.join(config.uploadPath, outputFileName);

		console.log(`ƒêang gh√©p ph·ª• ƒë·ªÅ ${subtitlePath} v√†o video ${videoPath}`);

		const muxingPromise = new Promise((resolve, reject) => {
			// X√°c ƒë·ªãnh v·ªã tr√≠ hi·ªÉn th·ªã ph·ª• ƒë·ªÅ
			let positionArg = '';
			switch (finalOptions.position) {
				case 'top':
					positionArg = '(w-tw)/2:10';
					break;
				case 'middle':
					positionArg = '(w-tw)/2:(h-th)/2';
					break;
				case 'bottom':
				default:
					positionArg = '(w-tw)/2:h-th-10';
			}

			// S·ª≠ d·ª•ng ffmpeg ƒë·ªÉ gh√©p ph·ª• ƒë·ªÅ v√†o video v·ªõi c√°c t√πy ch·ªçn
			// Th·ª≠ hai ph∆∞∆°ng ph√°p kh√°c nhau ƒë·ªÉ gh√©p ph·ª• ƒë·ªÅ
			// Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng -c:s mov_text (t·ªët cho MP4)
			const command1 =
				`ffmpeg -i "${videoPath}" -i "${subtitlePath}" -c:v copy -c:a copy ` +
				`-c:s mov_text -metadata:s:s:0 language=${finalOptions.language} ` +
				`-disposition:s:0 default ` +
				`"${outputPath}"`;

			// Ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng -vf subtitles (t·ªët cho nhi·ªÅu ƒë·ªãnh d·∫°ng)
			const command2 =
				`ffmpeg -i "${videoPath}" -vf "subtitles=${subtitlePath}:force_style='FontName=${finalOptions.font},FontSize=${finalOptions.fontSize},PrimaryColour=&HFFFFFF,BackColour=&H80000000,BorderStyle=3,Outline=1,Shadow=1,Alignment=2'" ` +
				`-c:a copy "${outputPath}"`;

			// Th·ª≠ ph∆∞∆°ng ph√°p 2 tr∆∞·ªõc (render tr·ª±c ti·∫øp)
			console.log(`Th·ª±c thi l·ªánh (ph∆∞∆°ng ph√°p 2): ${command2}`);

			const childProcess = exec(command2, (error2, stdout2, stderr2) => {
				if (error2) {
					console.error(`Ffmpeg error (ph∆∞∆°ng ph√°p 2): ${error2.message}`);
					console.log('Th·ª≠ ph∆∞∆°ng ph√°p 1...');

					// N·∫øu ph∆∞∆°ng ph√°p 2 th·∫•t b·∫°i, th·ª≠ ph∆∞∆°ng ph√°p 1
					exec(command1, (error, stdout, stderr) => {
						if (error) {
							console.error(`Ffmpeg error (ph∆∞∆°ng ph√°p 1): ${error.message}`);
							reject(error);
							return;
						}

						if (stderr) {
							console.log(`Ffmpeg stderr (ph∆∞∆°ng ph√°p 1): ${stderr}`);
						}

						console.log(`Ffmpeg stdout (ph∆∞∆°ng ph√°p 1): ${stdout}`);

						// Ki·ªÉm tra xem file k·∫øt qu·∫£ c√≥ t·ªìn t·∫°i kh√¥ng
						fs.access(outputPath, fs.constants.F_OK, (err) => {
							if (err) {
								console.error(`Kh√¥ng t√¨m th·∫•y file k·∫øt qu·∫£: ${outputPath}`);
								reject(new Error('Kh√¥ng th·ªÉ t·∫°o file video v·ªõi ph·ª• ƒë·ªÅ'));
							} else {
								console.log(`File video v·ªõi ph·ª• ƒë·ªÅ ƒë√£ ƒë∆∞·ª£c t·∫°o: ${outputPath}`);
								resolve(outputPath);
							}
						});
					});
					return;
				}

				if (stderr2) {
					console.log(`Ffmpeg stderr (ph∆∞∆°ng ph√°p 2): ${stderr2}`);
				}

				console.log(`Ffmpeg stdout (ph∆∞∆°ng ph√°p 2): ${stdout2}`);

				// Ki·ªÉm tra xem file k·∫øt qu·∫£ c√≥ t·ªìn t·∫°i kh√¥ng
				fs.access(outputPath, fs.constants.F_OK, (err) => {
					if (err) {
						console.error(`Kh√¥ng t√¨m th·∫•y file k·∫øt qu·∫£: ${outputPath}`);
						reject(new Error('Kh√¥ng th·ªÉ t·∫°o file video v·ªõi ph·ª• ƒë·ªÅ'));
					} else {
						console.log(`File video v·ªõi ph·ª• ƒë·ªÅ ƒë√£ ƒë∆∞·ª£c t·∫°o: ${outputPath}`);
						resolve(outputPath);
					}
				});
			});

			// Hi·ªÉn th·ªã ti·∫øn tr√¨nh
			let lastStatus = '';
			let lastUpdateTime = 0;

			childProcess.stderr?.on('data', (data) => {
				const statusText = data.toString().trim();
				if (statusText.includes('time=')) {
					process.stdout.write(`\rƒêang x·ª≠ l√Ω: ${statusText}`);

					// G·ª≠i c·∫≠p nh·∫≠t l√™n Telegram
					const now = Date.now();
					if (
						finalOptions.telegramInfo &&
						now - lastUpdateTime > STATUS_UPDATE_INTERVAL
					) {
						lastUpdateTime = now;
						lastStatus = statusText;

						try {
							const { ctx, messageId } = finalOptions.telegramInfo;
							ctx.telegram
								.editMessageText(
									ctx.chat.id,
									messageId,
									null,
									formatMessage(
										'üîÑ',
										'ƒêang gh√©p ph·ª• ƒë·ªÅ v√†o video',
										`<code>${statusText}</code>\n\nüîπ Ti·∫øn ƒë·ªô: ${extractProgress(statusText)}\nüîπ T·ªëc ƒë·ªô: ${extractSpeed(statusText)}\nüîπ Th·ªùi gian ƒë√£ x·ª≠ l√Ω: ${extractTime(statusText)}`
									),
									{ parse_mode: 'HTML' }
								)
								.catch((err) => {
									// B·ªè qua l·ªói flood control ho·∫∑c tin nh·∫Øn kh√¥ng thay ƒë·ªïi
									if (
										!err.message.includes('message is not modified') &&
										!err.message.includes('flood control')
									) {
										console.error('L·ªói khi c·∫≠p nh·∫≠t tin nh·∫Øn Telegram:', err);
									}
								});
						} catch (telegramError) {
							console.error(
								'L·ªói khi g·ª≠i c·∫≠p nh·∫≠t l√™n Telegram:',
								telegramError
							);
							// Ti·∫øp t·ª•c x·ª≠ l√Ω b√¨nh th∆∞·ªùng ngay c·∫£ khi kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c Telegram
						}
					}
				}
			});
		});

		// B·ªçc promise v·ªõi timeout d√†i h∆°n (2 gi·ªù) cho qu√° tr√¨nh gh√©p
		return pTimeout(
			muxingPromise,
			MUXING_TIMEOUT,
			`Qu√° th·ªùi gian (${MUXING_TIMEOUT / 1000 / 60} ph√∫t) khi gh√©p ph·ª• ƒë·ªÅ v√†o video`
		);
	} catch (error) {
		console.error('Error muxing subtitles:', error);
		throw error;
	}
}

/**
 * T·∫°o ƒë∆∞·ªùng d·∫´n tr·ª±c ti·∫øp ƒë·ªÉ t·∫£i file
 * @param {string} filePath - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫ßn t·∫°o link
 * @returns {string} - URL tr·ª±c ti·∫øp ƒë·ªÉ t·∫£i file
 */
function getDirectDownloadLink(filePath) {
	// L·∫•y t√™n file
	const fileName = path.basename(filePath);

	// T·∫°o URL t·∫£i tr·ª±c ti·∫øp
	// L∆∞u √Ω: URL n√†y ph·ª• thu·ªôc v√†o c·∫•u h√¨nh m√°y ch·ªß web c·ªßa b·∫°n
	// V√≠ d·ª•: N·∫øu m√°y ch·ªß c·ªßa b·∫°n c√≥ th∆∞ m·ª•c /uploads ƒë∆∞·ª£c ph·ª•c v·ª• t·∫°i /downloads
	const downloadLink = `/downloads/${fileName}`;

	// Thay th·∫ø b·∫±ng URL th·ª±c t·∫ø c·ªßa m√°y ch·ªß c·ªßa b·∫°n
	const baseUrl = process.env.BASE_URL || 'http://localhost:3000';
	const fullDownloadUrl = `${baseUrl}${downloadLink}`;

	return fullDownloadUrl;
}

// C√°c h√†m tr√≠ch xu·∫•t th√¥ng tin t·ª´ chu·ªói tr·∫°ng th√°i ffmpeg
function extractProgress(statusText) {
	const timeMatch = statusText.match(/time=(\d+:\d+:\d+\.\d+)/);
	if (timeMatch) {
		return timeMatch[1] || 'ƒêang x·ª≠ l√Ω...';
	}
	return 'ƒêang x·ª≠ l√Ω...';
}

function extractSpeed(statusText) {
	const speedMatch = statusText.match(/speed=(\d+\.\d+x)/);
	if (speedMatch) {
		return speedMatch[1] || 'ƒêang t√≠nh to√°n...';
	}
	return 'ƒêang t√≠nh to√°n...';
}

function extractTime(statusText) {
	const timeMatch = statusText.match(/time=(\d+:\d+:\d+\.\d+)/);
	if (timeMatch) {
		return timeMatch[1] || '00:00:00';
	}
	return '00:00:00';
}

module.exports = {
	muxSubtitleToVideo,
	getDirectDownloadLink,
};
