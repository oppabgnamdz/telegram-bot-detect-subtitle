/**
 * X·ª≠ l√Ω t·∫£i l√™n file
 */

const fs = require('fs-extra');
const path = require('path');
const crypto = require('crypto');
const config = require('../config');
const { formatMessage, EMOJI } = require('../utils/messageFormatter');
const { getUserState, updateUserState } = require('../utils/userState');
const { Markup } = require('telegraf');
const {
	checkUserPermission,
	incrementUserCommand,
} = require('../utils/userPermission');

const MAX_FILE_SIZE = 20 * 1024 * 1024; // 20MB trong byte

/**
 * T·∫°o t√™n file an to√†n
 * @param {string} fileName - T√™n file g·ªëc
 * @param {boolean} isDocument - C√≥ ph·∫£i l√† document kh√¥ng
 * @returns {string} T√™n file an to√†n
 */
function createSafeFileName(fileName, isDocument) {
	const randomHash = crypto.randomBytes(8).toString('hex');
	const fileExt = path.extname(fileName) || (isDocument ? '.txt' : '.mp4');
	return `file_${randomHash}${fileExt}`;
}

/**
 * Ki·ªÉm tra k√≠ch th∆∞·ªõc file
 * @param {number} fileSize - K√≠ch th∆∞·ªõc file
 * @returns {boolean} File c√≥ h·ª£p l·ªá kh√¥ng
 */
async function validateFileSize(ctx, fileSize) {
	if (fileSize > MAX_FILE_SIZE) {
		await ctx.reply(
			formatMessage(
				EMOJI.ERROR,
				'File qu√° l·ªõn',
				`Telegram ch·ªâ cho ph√©p bot t·∫£i xu·ªëng file t·ªëi ƒëa 20MB. File c·ªßa b·∫°n c√≥ k√≠ch th∆∞·ªõc ${(fileSize / (1024 * 1024)).toFixed(2)}MB. Vui l√≤ng s·ª≠ d·ª•ng URL tr·ª±c ti·∫øp ƒë·∫øn video ho·∫∑c g·ª≠i file nh·ªè h∆°n.`
			),
			{ parse_mode: 'HTML' }
		);
		return false;
	}
	return true;
}

/**
 * T·∫£i file t·ª´ Telegram
 * @param {object} ctx - Context Telegraf
 * @param {string} fileId - ID c·ªßa file tr√™n Telegram
 * @param {string} filePath - ƒê∆∞·ªùng d·∫´n l∆∞u file
 * @returns {Promise<boolean>} K·∫øt qu·∫£ t·∫£i file
 */
async function downloadFileFromTelegram(ctx, fileId, filePath) {
	const downloadMsg = await ctx.reply(
		formatMessage(
			EMOJI.DOWNLOAD,
			'ƒêang t·∫£i file',
			'Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...'
		),
		{ parse_mode: 'HTML' }
	);

	try {
		const fileLink = await ctx.telegram.getFileLink(fileId);
		const response = await fetch(fileLink.href);

		if (!response.ok) {
			throw new Error(`Kh√¥ng th·ªÉ t·∫£i file: ${response.statusText}`);
		}

		const arrayBuffer = await response.arrayBuffer();
		const buffer = Buffer.from(arrayBuffer);
		await fs.writeFile(filePath, buffer);

		await ctx.telegram.editMessageText(
			ctx.chat.id,
			downloadMsg.message_id,
			null,
			formatMessage(
				EMOJI.SUCCESS,
				'ƒê√£ t·∫£i xong file',
				`K√≠ch th∆∞·ªõc: ${(fs.statSync(filePath).size / (1024 * 1024)).toFixed(2)} MB`
			),
			{ parse_mode: 'HTML' }
		);

		return true;
	} catch (error) {
		console.error('L·ªói t·∫£i file t·ª´ Telegram:', error);
		await ctx.telegram.editMessageText(
			ctx.chat.id,
			downloadMsg.message_id,
			null,
			formatMessage(
				EMOJI.ERROR,
				'Kh√¥ng th·ªÉ t·∫£i file',
				'ƒê√£ x·∫£y ra l·ªói khi t·∫£i file t·ª´ Telegram. Gi·ªõi h·∫°n t·ªëi ƒëa l√† 20MB. Vui l√≤ng th·ª≠ l·∫°i v·ªõi URL ho·∫∑c file nh·ªè h∆°n.'
			),
			{ parse_mode: 'HTML' }
		);
		return false;
	}
}

/**
 * X·ª≠ l√Ω sau khi t·∫£i file th√†nh c√¥ng
 * @param {object} ctx - Context Telegraf
 * @param {string} userId - ID c·ªßa ng∆∞·ªùi d√πng
 * @param {string} filePath - ƒê∆∞·ªùng d·∫´n file ƒë√£ t·∫£i
 * @param {string} fileExt - Ph·∫ßn m·ªü r·ªông c·ªßa file
 */
async function handleSuccessfulUpload(ctx, userId, filePath, fileExt) {
	try {
		// Ki·ªÉm tra quy·ªÅn ng∆∞·ªùi d√πng
		const hasPermission = await checkUserPermission(ctx);
		if (!hasPermission) {
			await ctx.reply(
				formatMessage(
					EMOJI.ERROR,
					'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
					'B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt l∆∞·ª£t d√πng trong ng√†y h√¥m nay. Vui l√≤ng th·ª≠ l·∫°i v√†o ng√†y mai ho·∫∑c n√¢ng c·∫•p t√†i kho·∫£n.'
				),
				{ parse_mode: 'HTML' }
			);
			return;
		}

		const isSrtFile = fileExt.toLowerCase() === '.srt';
		const stateData = isSrtFile
			? { srtPath: filePath }
			: { videoPath: filePath };

		// Chuy·ªÉn sang tr·∫°ng th√°i ch·ªù ch·ªçn ki·ªÉu xu·∫•t k·∫øt qu·∫£ thay v√¨ ch·ªù prompt
		updateUserState(userId, 'waiting_for_output_option', {
			...stateData,
			prompt: null, // Prompt s·∫Ω ƒë∆∞·ª£c y√™u c·∫ßu sau n·∫øu c·∫ßn
		});

		const fileType = isSrtFile ? 'file ph·ª• ƒë·ªÅ .srt' : 'file video';
		await ctx.reply(
			formatMessage(
				EMOJI.OPTIONS,
				`ƒê√£ nh·∫≠n ${fileType}`,
				'Vui l√≤ng ch·ªçn c√°ch b·∫°n mu·ªën nh·∫≠n k·∫øt qu·∫£:'
			),
			{
				parse_mode: 'HTML',
				...Markup.inlineKeyboard([
					[
						Markup.button.callback(
							'1. Xu·∫•t file ph·ª• ƒë·ªÅ (m·∫∑c ƒë·ªãnh)',
							'output_option_1'
						),
					],
					[
						Markup.button.callback(
							'2. Gh√©p ph·ª• ƒë·ªÅ g·ªëc v√†o video',
							'output_option_2'
						),
					],
					[
						Markup.button.callback(
							'3. Gh√©p ph·ª• ƒë·ªÅ ti·∫øng Vi·ªát v√†o video',
							'output_option_3'
						),
					],
					[Markup.button.callback('H·ªßy', 'cancel_subtitle')],
				]),
			}
		);
	} catch (error) {
		console.error('L·ªói khi x·ª≠ l√Ω file:', error);
		await ctx.reply(
			formatMessage(
				EMOJI.ERROR,
				'Kh√¥ng th·ªÉ t·∫£i file',
				'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c s·ª≠ d·ª•ng URL thay th·∫ø.'
			),
			{ parse_mode: 'HTML' }
		);
		updateUserState(userId, 'idle');

		// X√≥a file n·∫øu ƒë√£ t·∫£i v·ªÅ nh∆∞ng x·ª≠ l√Ω th·∫•t b·∫°i
		if (filePath && fs.existsSync(filePath)) {
			try {
				await fs.unlink(filePath);
				console.log('ƒê√£ x√≥a file upload do l·ªói:', filePath);
			} catch (unlinkError) {
				console.error('L·ªói khi x√≥a file:', unlinkError);
			}
		}
	}
}

/**
 * X·ª≠ l√Ω t·∫£i l√™n file (document ho·∫∑c video)
 * @param {object} ctx - Context Telegraf
 */
async function handleFileUpload(ctx) {
	try {
		// Ki·ªÉm tra quy·ªÅn ng∆∞·ªùi d√πng
		const hasPermission = await checkUserPermission(ctx);
		if (!hasPermission) {
			await ctx.reply(
				'üîí B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt l∆∞·ª£t d√πng trong ng√†y h√¥m nay. Vui l√≤ng th·ª≠ l·∫°i v√†o ng√†y mai ho·∫∑c n√¢ng c·∫•p t√†i kho·∫£n.'
			);
			return;
		}

		const userId = ctx.from.id;
		const userState = getUserState(userId);

		if (
			userState.state !== 'waiting_for_url_or_file' &&
			userState.state !== 'idle'
		) {
			return;
		}

		let filePath;
		const isDocument = !!ctx.message.document;
		const fileId = isDocument
			? ctx.message.document.file_id
			: ctx.message.video.file_id;
		const fileName = isDocument
			? ctx.message.document.file_name
			: `video_${Date.now()}.mp4`;
		const fileSize = isDocument
			? ctx.message.document.file_size
			: ctx.message.video.file_size;

		if (!(await validateFileSize(ctx, fileSize))) {
			return;
		}

		const safeFileName = createSafeFileName(fileName, isDocument);
		filePath = path.join(config.uploadPath, safeFileName);

		if (await downloadFileFromTelegram(ctx, fileId, filePath)) {
			await handleSuccessfulUpload(
				ctx,
				userId,
				filePath,
				path.extname(safeFileName)
			);
			await incrementUserCommand(ctx);
		}
	} catch (error) {
		console.error('L·ªói khi x·ª≠ l√Ω file:', error);
		await ctx.reply(
			formatMessage(
				EMOJI.ERROR,
				'Kh√¥ng th·ªÉ t·∫£i file',
				'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c s·ª≠ d·ª•ng URL thay th·∫ø.'
			),
			{ parse_mode: 'HTML' }
		);
		updateUserState(userId, 'idle');

		// X√≥a file n·∫øu ƒë√£ t·∫£i v·ªÅ nh∆∞ng x·ª≠ l√Ω th·∫•t b·∫°i
		if (filePath && fs.existsSync(filePath)) {
			try {
				await fs.unlink(filePath);
				console.log('ƒê√£ x√≥a file upload do l·ªói:', filePath);
			} catch (unlinkError) {
				console.error('L·ªói khi x√≥a file:', unlinkError);
			}
		}
	}
}

module.exports = {
	handleFileUpload,
};
